------------
certificates
------------

# Download and import website certs into JAVA store (eg. google's certs for dl.google.com/android repo):

openssl s_client -connect google.com:443 -showcerts | openssl x509 -out certfile.txt
keytool -importcert -alias cibcglobalproxy -file certfile.txt -trustcacerts -keystore /usr/lib/jvm/java-1.8-openjdk/jre/lib/security/cacerts -storetype JKS

OR 

keytool -importcert -file cibc_proxy.crt -alias cibc_proxy -keystore /usr/lib/jvm/java-1.8-openjdk/jre/lib/security/cacerts
keytool -importcert -file cibc_proxy.crt -alias cibc_proxy -keystore /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/cacerts

# check cacerts store

keytool -list -v -keystore /path/to/cacerts



=======
ciphers
=======

Cipher groups
-------------

Group 1: These cipher suites have perfect forward secrecy (ECDHE) and authenticated encryption (GCM):
	E.g.: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384

Group 2:  Perfect forward secrecy, but do not have authenticated encryption.
	E.g.: ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384

Group 3: Authenticated encryption but no perfect forward secrecy:
	E.g. : AES128-GCM-SHA256, AES256-GCM-SHA384

Group 4: Standard algorithms but no perfect forward secrecy or authenticated encryption:
	E.g.: AES128-SHA256, AES256-SHA256
	
Group 5: Perfect forward secrecy, but use SHA-1: (Do Not Include if possible)
	E.g.: ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA

Group 6: Standard algorithms but use SHA-1: (Do Not Include if possible)
	E.g.: AES128-SHA, AES256-SHA, DES-CBC3-SHA

Group 7: RC4 gets its own special category: (Do Not Include. This is deviation)
	E.g.: RC4-SHA

Group 8: For the love of God, do not use these: (Do Not Include. This is deviation)
	E.g.: DES-CBC-SHA, RC4-MD5, IDEA-CBC-SHA



-------
crontab
-------

# Edit crontab
crontab -e

# List crontab
crontab -l

# Run crontab (Debian/Ubuntu)
service cron start
ps -ef | grep cron



---------
curl/wget
---------

# Download a file (eg. Artifactory, using credentials)
curl -u <user>:<password> http://artifactory_url:8081/artifactory/path/to/package/something.rpm -o ./something.rpm

# Upload a file (eg. to Artifactory w/ creds)
curl -X PUT -u <user>:<password> -T something.rpm "http://artifactory_url:8081/artifactory/path/to/package/something.rpm"

# recursive download with wget
wget --no-parent -r http://WEBSITE.com/DIRECTORY

# set insecure
echo insecure >> $HOME/.curlrc


------
docker
------

# sharing namespaces: https://www.guidodiepen.nl/2017/04/accessing-container-contents-from-another-container/

# exposing docker port with bobrik/socat container:
docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 2376:2375 bobrik/socat TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock

# bobrik/socat container as a service:
docker service create --mode=global --name socat \
--publish 2376:2375 \
--mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
--entrypoint "socat TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock" \
bobrik/socat

# docker login troubleshootin
	- docker login not working (user interaction not allowed msg)
   		- remove credsStore from config.json
   		- if above doesn't work, uncheck 'Securely store Docker logins in macOS keychain'
   		- if above doesn't work, rm /usr/local/bin/docker-credential-osxkeychain

# checking container logs

docker run -it -v /var/lib/docker:/var/lib/docker <image_ID> bash - check /var/lib/docker/containers/<ID>/<container-id>-json.log

# for a persistent container, ensure auto restarts if machine goes down
docker update --restart=always <container_id>

# sidecar pattern - https://www.magalix.com/blog/the-sidecar-pattern

# spin up Jenkins in docker
docker run \
    --name dcct-mobile-callisto-jenkins \
    --detach \
    --network jenkins \
    --env DOCKER_HOST=tcp://docker:2376 \
    --env DOCKER_CERT_PATH=/certs/client \
    --env DOCKER_TLS_VERIFY=1 \
    --publish 80:8080 \
    --publish 50000:50000 \
    --volume jenkins-data:/var/jenkins_home \
    --volume jenkins-docker-certs:/certs/client:ro \
    <ARTIFACTORY_URL>/local-docker-dcct/mobile/dev-jenkins-lts-2.263.1:1.0

# spin up cntlm on docker
docker run --restart always --name cntlm \
  -e "USERNAME=username" \
  -e "DOMAIN=mydomain" \
  -e "PASSNTLMV2=640937B847F8C6439D87155508FA8479" \
  -e "PROXY=123.123.123.123:8080" \
  -p 3128:3128 \
  robertdebock/docker-cntlm


# Building an image with multi-stage (cut down the size) - example Dockerfile

#### First stage

FROM ubuntu:18.04 as builder
RUN apt-get update
RUN apt-get install -y make yasm nasm as31 binutils
COPY . .
RUN make release


#### Second stage

FROM scratch            # can use alpine here if scratch is too empty
COPY --from=builder /asttpd /asmttpd         # this is where the executable produced from stage 1 gets copied over to the second stage
COPY /web_root/index.html /web_root/index.html

CMD ["/asmttpd", "/web_root", "8080"]



------------------------------
Fail2ban - for blocking access
------------------------------

- Source article: https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-7

yum install epel-release
yum install fail2ban
systemctl enable fail2ban

- Edit /etc/fail2ban/jail.local (see file on disk for details)

systemctl restart fail2ban
fail2ban-client status
fail2ban-client status sshd



--------------
File transfers
--------------

# Linux large tar transfer w/ untar at the same time, nohup the log into tmp:
nohup bash -c "cat vl53_aem01p_aaem-olbauth-01_20190824_agentsdisabled.tar | ssh -t aemftp@52.233.56.66 'tar -C /mnt/deploy/oldrepo -xvf - aem-olbauth-01/repos'" > /tmp/aemXfer.out &

# using netcat

tar -cvf - ~/var | nc -vv -l 127.0.0.1 -p 1234    # better to use the localhost IP for security

# then on client
cd /tmp
nc 127.0.0.1 1234 | tar -xvf -


----------------
Filesystem types
----------------
auto - this is a special one. It will try to guess the fs type when you use this.

ext4 - this is probably the most common Linux fs type of the last few years

ext3 - this is the most common Linux fs type from a couple years back

ntfs - this is the most common Windows fs type or larger external hard drives

vfat - this is the most common fs type used for smaller external hard drives

exfat - is also a file system option commonly found on USB flash drives and other external drives

glusterfs - for Gluster

zfs - an advanced fs fype that pools disk storage
	# source article: https://itsfoss.com/what-is-zfs/



---------------------------
firewalld (on CentOS/RHEL7)
---------------------------

# configuration file location
/etc/firewalld/firewalld.conf


# check firewalld status
systemctl status firewalld
	# or
firewall-cmd --state


# check default configuration
firewall-cmd --list-all


# check zones
firewall-cmd --get-zones   		# output: block dmz drop external home internal public trusted work

# or get default zone
firewall-cmd --get-default-zone


# check firewalld services, see all the apps which firewalld can be configured for
firewall-cmd --get-services


# allow a specific port
firewall-cmd --add-port=3306/tcp


# change default zone to dmz and open up incoming connections (this is supposed to make it internally accessible only, but you can also limit the source address entries instead of putting 0.0.0.0 as shown below)
firewall-cmd --set-default-zone=dmz
firewall-cmd --zone=dmz --add-rich-rule='rule family="ipv4" source address="0.0.0.0/0" accept'


# restart firewalld service
systemctl restart firewalld
   # or
firewall-cmd --reload


# add/remove a specific service(s)
firewall-cmd --add-service=mysql --permanent    # the permanent flag will make this setting survive a reload or restart
  # or
firewall-cmd --add-service={mysql,http,https,ldap} --permanent
  # or remove
firewall-cmd --remove-service={mysql,http,https,ldap} --permanent
firewall-cmd --reload


# port forwarding
firewall-cmd --add-forward-port=port=8080:proto=tcp:toport=80   # can add toaddr= if you want to redirect to another host


# add traffic "rich rule"
firewall-cmd --add-rich-rule='rule family="ipv4" source address="192.168.122.102" accept' # will accept all traffic from this IP 
firewall-cmd --add-rich-rule='rule family="ipv4" source address="192.168.122.103" drop'   # will not accept traffic from this IP


# set all temporary or runtime firewalld configurations permanently ***
firewall-cmd --runtime-to-permanent



-------
Fortify
-------

- upload command: ./fortifyclient -url https://fortify_url.com/ssc -authtoken xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx uploadFPR -file ../something.fpr -project "project_name" -version "latest"


---
GIT
---

# install newer version on CentOS7
yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
yum install git


# Migrate repos from one remote to another
git clone --bare <repo_url>
cd <cloned_repo>.git
git push --mirror  https://github.cibcdevops.com/<new-repo>


# set up storing creds in OSX
git config --global credential.helper store


------
Github
------

- sudo reboot - reboot Github instance
- sudo systemctl start elasticsearch - restart search service
- sudo systemctl status elasticsearch - check search services status


--------
IPTables
--------

# To block 116.10.191.* addresses:
sudo iptables -A INPUT -s 116.10.191.0/24 -j DROP

# To block 116.10.*.* addresses:
sudo iptables -A INPUT -s 116.10.0.0/16 -j DROP

# To block 116.*.*.* addresses:
sudo iptables -A INPUT -s 116.0.0.0/8 -j DROP

# Open a port (RHEL6)
iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 5667 -j ACCEPT
service iptables save



-----
istio
-----

Video source: Istio Service Mesh Explained - https://www.youtube.com/watch?v=KUHzxTCe5Uc

- istiod - control plane of the Istio service mesh, responsible for injecting sidecar proxies into pods (which happen when apps "opt-in" to the service mesh)
 - components
    - pilot - traffic management, injecting/managing lifecycle of sidecar proxies
    - citadel - certificate authority, helps achieve mutual TLS between services within the mesh
    - galley - translates kubernetes YAML into format for Istio to process


# install Istio

curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.6.12 TARGET_ARCH=x86_64 bash -
mv istio-1.6.12/bin/istioctl /usr/local/bin
chmod +x /usr/local/bin/istioctl
mv istio-1.6.12 /tmp/


# Pre-flight check for compatibility with a cluster (k8s api, version, if istio already installed, can setup within cluster, auto sidecar injector)

istioctl x precheck


# Istio profile check and install with default profile

istioctl profile list
istioctl install --set profile=default
kubectl -n istio-system get pods
istioctl proxy-status


- two ways to opt-in
 	- label a namespace (all pods within the namespace will join the service mesh)
		kubectl label namespace/default istio-injection=enabled    # takes effect for new pods, you'll see an additional container within each pod
 
	- use istioctl to grab the deployment YAML and inject the sidecar proxy using istioctl
		kubectl -n ingress-nginx get deploy nginx-ingress-controller -o yaml | istioctl kube-inject -f - | kubectl apply -f -    # takes effect for new pods
  

- add-ons
	- comes pre-shipped with a Grafana and Kiali dashboard add-ons for rich metrics/telemetry
	- to install Grafana (to the Istio namespace):
		kubectl apply -f /tmp/istio-1.6.12/samples/addons/prometheus.yaml
		kubectl apply -f /tmp/istio-1.6.12/samples/addons/grafana.yaml
		kubectl get pods --namespace istio-system

	- to expose Grafana dashboard
		kubectl -b istio-system port-forward svc/grafana 3000

    - see something wrong in Grafana? Command below to check logs within the cluster of pods throwing errors:
    	kubectl logs <pod_name> -c <container_name> --tail 50

    - need to buy dev some time to fix something? Implement virtual service in Istio (i.e. automated retries, canary deploys, traffic splitting)
    	- see https://www.youtube.com/watch?v=KUHzxTCe5Uc @ 26:10


----
jaxb
----

# find jax2b cached artifacts in maven local repo
find . | grep jaxb2-plugin | grep 0.8.1 | grep jar


-------
Jenkins
-------

# when login is broken
	- Stop Jenkins (the easiest way to do this is to kill the servlet container.)
	- Go to $JENKINS_HOME in the file system and find config.xml file.
	- Open this file in the editor.
	- Look for the false element in this file.
	- Replace true with false
	- Remove the elements authorizationStrategy and securityRealm
	- Start Jenkins


-------
kubectl
-------

kubectl expose deploy <pod> --port <port> --dry-run -o yaml     # Expose a deployment as a service



---
ldd
---

# Linux - checking library dependencies
ldd -d 



----------------------------
localtime - change time zone
----------------------------

rm -f /etc/localtime
ln -s /usr/share/zoneinfo/America/Toronto /etc/localtime
date


--------
lscolors
--------

# Colourize text in terminal:
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
eval "$(dircolors /etc/DIR_COLORS)"


----
lsof
----

lsof <filename>       # check which processes have this file open
lsof -p <PID>         # check specific pid's open files (could be multiple)
lsof -u <userid>      # check list of open files for specific user
lsof -i <port>        # check which processes are listening on specific port
lsof -i <protocol>    # check which processes are listening on specific protocol (i.e. tcp)co



---------
Mac OS X
---------

   - check RAM:
   		system_profiler SPHardwareDataType | grep "Memory:"
   - check # of CPU cores:
   		sysctl -a | grep cpu.core_count
   - check GPU:
		system_profiler SPDisplaysDataType
   - stop and start Jenkins
   		sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
		sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
   - update URL
   	    sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 8082
   	    sudo defaults write /Library/Preferences/org.jenkins-ci prefix /jenkins
   	    for brew:
   	       /usr/local/Cellar/jenkins/2.x.x/homebrew.mxcl.jenkins.plist
   	       		update:
   	       			  <string>--httpPort=8082</string>
  					  <string>--prefix=/jenkins</string>
   	       brew services restart jenkins-lts
   - update heap size/permGen
        sudo defaults write /Library/Preferences/org.jenkins-ci minPermGen 512m
  		sudo defaults write /Library/Preferences/org.jenkins-ci permGen 2048m
  		sudo defaults write /Library/Preferences/org.jenkins-ci minHeapSize 512m
  		sudo defaults write /Library/Preferences/org.jenkins-ci heapSize 2048m


   - check installed java versions:
   		/usr/libexec/java_home -V

-----------------
Mounting a Volume
-----------------

Source article: https://www.linode.com/docs/platform/block-storage/how-to-use-block-storage-with-your-linode/#add-a-volume-from-the-linode-detail-page

# One-time step for defining the FS type of the volume
mkfs.ext4 $volume_path   # check the file system path of the volume in your cloud console, it will show you the device drive location

# Steps for mounting the volume
mkdir /mnt/my-volume
mount $volume_path /mnt/my-volume
df -h

# Create entry in /etc/fstab:
FILE_SYSTEM_PATH /mnt/my-volume ext4 defaults,noatime,nofail 0 2

* noatime - This will save space and time by preventing writes made to the filesystem for data being read on the volume.
* nofail - If the volume is not attached, this will allow your server to boot/reboot normally without hanging at dependency failures if the volume is not attached.



# if you need to unmount it or reboot your Linode without affecting the volume
umount /mnt/my-volume
Remove /etc/fstab entry



--------
netgroup
--------

# Check netgroup list (Linux):
> ldaplist -l netgroup <netgroup_name> 



---------
netcat/nc
---------

### SOURCE page: https://www.linode.com/docs/guides/netcat/ ###


# make netcat act as the telnet utility (TCP protocol is the default, use -u for UDP procotol)

nc localhost 22


# make netcat act as a server, accept incoming connection on a given port

nc -l -p 1234


# get more info from remote server (eg. for connectivity issues)

nc -v localhost 1234 (or nc -vv)


# port scanning (eg. on localhost, from ports 1-30)

nc -z -vv -n 127.0.0.1 1-30


# transferring files (a client connects to port 4567 below to receive the access.log contents)

cat access.log | nc -vv -l -p 4567

# and then

nc -vv localhost 4567 > fileToGet
^C (to close the connection)


# turn a process into a server (when client connects, nc will execute /bin/bash, to give shell access to machine)

nc -vv -l -p 12345 -e /bin/bash


# executing a command after connecting

nc -vv -c "ls -l" -l 127.0.0.1 -p 1234


# act as simple web server (eg. can use curl or wget to connect to this port to get the index.html contents)

nc -vv -l 127.0.0.1 -p 4567 < index.html
wget -qO- http://localhost:4567/


# get data from web servers

nc www.linode.com 80

# OR

echo -en "GET / HTTP/1.0\n\n\n" | netcat www.linode.com 80



# Create a chat server

nc -vv -l 127.0.0.1 -p 1234

# and from the client

nc -vv 127.0.0.1 1234

# then type in terminal





-------
netstat
-------

netstat -tupln   # display network connections, tcp and udp, show which processes are using which sockets (need root for p option), -l is for listening sockets, -n is for active tcp connectionsm 



-----
nginx
-----

# stop nginx
  nginx -s stop

# start nginx
  ./nginx


---
npm
---

- npm config set '//artifactory_url/artifactory/api/npm/npm/:_authToken' 'zsASDKLNvasdfoloi3w123lk1jhof8jaspodfj'
- npm config set sass_binary_site=http://artifactory_url:8081/artifactory/node-sass
- npm config set registry http://artifactory_url:8081/artifactory/api/npm/npm/
- npm -g config set user root
- npm config set strict-ssl false

--
ps
--

# Check full process args on Linux:
ps eww -p <PID>

or

ps -auwwwx | grep <anything>


-----
Regex
-----

^[0-9]{3}-[0-9]{3}-[0-9]{4}$     # match any phone number
^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$   # match three numbers before first dash, matching second and third sets are optional 
^[a-zA-Z0-9._]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$	 # one or more of the first set, followed by @, followed by one or more letters or numbers
^[\w\d._]+@[\w\d]+\.[\w]{2,3}$   # alternative to above, will match foreign letters and numbers as well because of \w and \d

Legend:

	Assertions/Quantifiers
		$		matches end of line
		^		matches beginning of line
		*		0 or more
		?		0 or 1
		+		1 or more
		{n}		exactly n
		{n,}	n or more
		{n,m}	between n and m


	Characters
		.		any exxcept newline
		[abc]	a, b, or c
		[a-z]	a, b, ...., z
		[^abc]	anything but a, b, c
		\d      digit
		\s      status
		\w      word character


	Special
		\n      newline
		\t      tab



---
RPM
---

- RPM install
   - set response - RESP_FILE=<app>-environment.response; export RESP_FILE
   - intialize rpmdb - rpm --initdb --dbpath /path/to/rpm_db
   - install - rpm --dbpath /path/to/rpm_db --prefix /install_path/ --nodeps -Uvh /path/to/rpm/ebm-wca-1.0.0-1.x86_64.rpm
   - query package - rpm -qi <rpm_name> --dbpath /path/to/rpm_db
   - check pkgmap - rpm -V <rpm_name> --dbpath /path/to/rpm_db
   - uninstall rpm - rpm -ev pkg_name --dbpath /path/to/rpm_db


---
sed
---

# Simple search and replace
sed -i -e 's/few/asd/g' hello.txt


----
sftp
----

# SFTP debug:
sftp -vv account@server




---------------
Shell scripting
---------------

read -ps    # -p is for prompt, -s is for secret text



-----
shipa
-----

Video Source: Making Kubernetes disappear with Shipa - https://www.youtube.com/watch?v=PW44JaAlI_8



------------------------------------------------------
ssh public/private key generation for passwordless SSH
------------------------------------------------------

1) on the client side, create an ssh public/private key pair:
	> ssh-keygen -t rsa -b 4096
	# do not enter a passphrase, just hit enter

2) Copy the contents of id_rsa.pub and ssh to the target server, cd to the user's .ssh folder, edit authorized_keys, and paste the pub key entry into the file and save. You should now be able to ssh from the client to the server without a password.

3) You can also try updating authorized_keys from the client like so:
	> ssh-copy-id -i ~/.ssh/id_rsa.pub user@host
	

-------
Storage
-------

Block vs File Storage: very traditional vs. the newer storage types

Block
	- accessed through SAN (storage area network)
	- lowest possibly latency
	- high performing
	- highly redundant


File
	- accessed via NAS (network area storage - all servers connecting to one place vs. san routing you to the right storage device)
	- highly scalable
	- accessible to multiple runtimes
	- simultaneous read/writes from multiple users


If you need:
	- boot volume - use block storage
	- lowest latency - block storage
	- mix of structured and unstructured data - file storage
	- share data with many users at once - file storage



NAS vs SAN

NAS - Network Attached Storage
		- store data in a centralized location accessible to all devices
		- just stores data, that's it
		- will have multiple hard drives in a RAID configuration
		- will have NIC to connect to router so its network accessible, accessed as a shared drive
		- small to medium scalability
		- disadvantage:
			- single point of failures


SAN - Storage Area Network
		- special high-speed network, stores and provides access to large amounts of data (dedicated for data storage)
		- multiple disk arrays, switches, and servers
		- advantages:
			- shared, therefore fault tolerant
			- recognized as a single drive from an OS
			- interconnected with fiber channel (from 2gbps to 128gbps - ultra fast)
			- not affected by network traffic
			- highly scalable
			- very redundant
		- disadvantage
			- fiber channel expensive (alternative iSCSI, cheaper but not as fast)
			- very expensive in general



------------
thread dumps
------------

Generating Thread Dumps
1.	Identify the process ID (pid) of the tomcat process running JIRA by executing the following command: 
2.	ps aux | grep jira
3.	Execute the following command (be sure to replace both occurrences of $JIRA_PID with the pid you identified in the previous step): 
4.	for i in $(seq 6); do top -b -H -p $JIRA_PID -n 1 > jira_cpu_usage.`date +%s`.txt; kill -3 $JIRA_PID; sleep 10; done
5.	That script will run for one minute, during which it will generate top output of the process threads to six text files in the current directory.
6.	Attach the files generated by the script to this issue.
7.	Generate and send a complete support zip.
